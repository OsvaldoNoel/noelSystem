import Bar from"./Bar";import Graphics from"../modules/Graphics";import Utils from"../utils/Utils";class RangeBar extends Bar{draw(i,e){let s=this.w,t=new Graphics(this.ctx);this.rangeBarOptions=this.w.config.plotOptions.rangeBar,this.series=i,this.seriesRangeStart=s.globals.seriesRangeStart,this.seriesRangeEnd=s.globals.seriesRangeEnd,this.barHelpers.initVariables(i);let a=t.group({class:"apexcharts-rangebar-series apexcharts-plot-series"});for(let r=0;r<i.length;r++){let o,l,n,h,g,b,d=s.globals.comboCharts?e[r]:r,{columnGroupIndex:p}=this.barHelpers.getGroupIndex(d),x=t.group({class:"apexcharts-series",seriesName:Utils.escapeString(s.globals.seriesNames[d]),rel:r+1,"data:realIndex":d});this.ctx.series.addCollapsedClassToSeries(x,d),i[r].length>0&&(this.visibleI=this.visibleI+1);let c=0,v=0,u=0;this.yRatio.length>1&&(this.yaxisIndex=s.globals.seriesYAxisReverseMap[d][0],u=d);let m=this.barHelpers.initialPositions();l=m.y,b=m.zeroW,o=m.x,v=m.barWidth,c=m.barHeight,n=m.xDivision,h=m.yDivision,g=m.zeroH;let P=t.group({class:"apexcharts-datalabels","data:realIndex":d}),f=t.group({class:"apexcharts-rangebar-goals-markers"});for(let e=0;e<s.globals.dataPoints;e++){const t=this.barHelpers.getStrokeWidth(r,e,d),a=this.seriesRangeStart[r][e],y=this.seriesRangeEnd[r][e];let R=null,I=null,H=null;const W={x:o,y:l,strokeWidth:t,elSeries:x};let w=this.seriesLen;if(s.config.plotOptions.bar.rangeBarGroupRows&&(w=1),void 0===s.config.series[r].data[e])break;if(this.isHorizontal){H=l+c*this.visibleI;let i=(h-c*w)/2;if(s.config.series[r].data[e].x){let s=this.detectOverlappingBars({i:r,j:e,barYPosition:H,srty:i,barHeight:c,yDivision:h,initPositions:m});c=s.barHeight,H=s.barYPosition}R=this.drawRangeBarPaths({indexes:{i:r,j:e,realIndex:d},barHeight:c,barYPosition:H,zeroW:b,yDivision:h,y1:a,y2:y,...W}),v=R.barWidth}else{s.globals.isXNumeric&&(o=(s.globals.seriesX[r][e]-s.globals.minX)/this.xRatio-v/2),I=o+v*this.visibleI;let i=(n-v*w)/2;if(s.config.series[r].data[e].x){let s=this.detectOverlappingBars({i:r,j:e,barXPosition:I,srtx:i,barWidth:v,xDivision:n,initPositions:m});v=s.barWidth,I=s.barXPosition}R=this.drawRangeColumnPaths({indexes:{i:r,j:e,realIndex:d,translationsIndex:u},barWidth:v,barXPosition:I,zeroH:g,xDivision:n,...W}),c=R.barHeight}const B=this.barHelpers.drawGoalLine({barXPosition:R.barXPosition,barYPosition:H,goalX:R.goalX,goalY:R.goalY,barHeight:c,barWidth:v});B&&f.add(B),l=R.y,o=R.x;let O=this.barHelpers.getPathFillColor(i,r,e,d),X=s.globals.stroke.colors[d];this.renderSeries({realIndex:d,pathFill:O,lineFill:X,j:e,i:r,x:o,y:l,y1:a,y2:y,pathFrom:R.pathFrom,pathTo:R.pathTo,strokeWidth:t,elSeries:x,series:i,barHeight:c,barWidth:v,barXPosition:I,barYPosition:H,columnGroupIndex:p,elDataLabelsWrap:P,elGoalsMarkers:f,visibleSeries:this.visibleI,type:"rangebar"})}a.add(x)}return a}detectOverlappingBars({i,j:e,barYPosition:s,barXPosition:t,srty:a,srtx:r,barHeight:o,barWidth:l,yDivision:n,xDivision:h,initPositions:g}){const b=this.w;let d=[],p=b.config.series[i].data[e].rangeName;const x=b.config.series[i].data[e].x,c=Array.isArray(x)?x.join(" "):x,v=b.globals.labels.map((i=>Array.isArray(i)?i.join(" "):i)).indexOf(c),u=b.globals.seriesRange[i].findIndex((i=>i.x===c&&i.overlaps.length>0));return this.isHorizontal?(s=b.config.plotOptions.bar.rangeBarGroupRows?a+n*v:a+o*this.visibleI+n*v,u>-1&&!b.config.plotOptions.bar.rangeBarOverlap&&(d=b.globals.seriesRange[i][u].overlaps,d.indexOf(p)>-1&&(s=(o=g.barHeight/d.length)*this.visibleI+n*(100-parseInt(this.barOptions.barHeight,10))/100/2+o*(this.visibleI+d.indexOf(p))+n*v))):(v>-1&&!b.globals.timescaleLabels.length&&(t=b.config.plotOptions.bar.rangeBarGroupRows?r+h*v:r+l*this.visibleI+h*v),u>-1&&!b.config.plotOptions.bar.rangeBarOverlap&&(d=b.globals.seriesRange[i][u].overlaps,d.indexOf(p)>-1&&(t=(l=g.barWidth/d.length)*this.visibleI+h*(100-parseInt(this.barOptions.barWidth,10))/100/2+l*(this.visibleI+d.indexOf(p))+h*v))),{barYPosition:s,barXPosition:t,barHeight:o,barWidth:l}}drawRangeColumnPaths({indexes:i,x:e,xDivision:s,barWidth:t,barXPosition:a,zeroH:r}){let o=this.w;const{i:l,j:n,realIndex:h,translationsIndex:g}=i,b=this.yRatio[g],d=this.getRangeValue(h,n);let p=Math.min(d.start,d.end),x=Math.max(d.start,d.end);void 0===this.series[l][n]||null===this.series[l][n]?p=r:(p=r-p/b,x=r-x/b);const c=Math.abs(x-p),v=this.barHelpers.getColumnPaths({barXPosition:a,barWidth:t,y1:p,y2:x,strokeWidth:this.strokeWidth,series:this.seriesRangeEnd,realIndex:h,i:h,j:n,w:o});if(o.globals.isXNumeric){const i=this.getBarXForNumericXAxis({x:e,j:n,realIndex:h,barWidth:t});e=i.x,a=i.barXPosition}else e+=s;return{pathTo:v.pathTo,pathFrom:v.pathFrom,barHeight:c,x:e,y:d.start<0&&d.end<0?p:x,goalY:this.barHelpers.getGoalValues("y",null,r,l,n,g),barXPosition:a}}preventBarOverflow(i){const e=this.w;return i<0&&(i=0),i>e.globals.gridWidth&&(i=e.globals.gridWidth),i}drawRangeBarPaths({indexes:i,y:e,y1:s,y2:t,yDivision:a,barHeight:r,barYPosition:o,zeroW:l}){let n=this.w;const{realIndex:h,j:g}=i;let b=this.preventBarOverflow(l+s/this.invertedYRatio),d=this.preventBarOverflow(l+t/this.invertedYRatio);const p=this.getRangeValue(h,g),x=Math.abs(d-b),c=this.barHelpers.getBarpaths({barYPosition:o,barHeight:r,x1:b,x2:d,strokeWidth:this.strokeWidth,series:this.seriesRangeEnd,i:h,realIndex:h,j:g,w:n});return n.globals.isXNumeric||(e+=a),{pathTo:c.pathTo,pathFrom:c.pathFrom,barWidth:x,x:p.start<0&&p.end<0?b:d,goalX:this.barHelpers.getGoalValues("x",l,null,h,g),y:e}}getRangeValue(i,e){const s=this.w;return{start:s.globals.seriesRangeStart[i][e],end:s.globals.seriesRangeEnd[i][e]}}}export default RangeBar;