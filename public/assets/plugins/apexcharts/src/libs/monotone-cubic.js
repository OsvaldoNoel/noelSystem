export const tangents=t=>{const e=finiteDifferences(t),n=t.length-1,s=[];let o,l,r,c;for(let s=0;s<n;s++)r=slope(t[s],t[s+1]),Math.abs(r)<1e-6?e[s]=e[s+1]=0:(o=e[s]/r,l=e[s+1]/r,c=o*o+l*l,c>9&&(c=3*r/Math.sqrt(c),e[s]=c*o,e[s+1]=c*l));for(let o=0;o<=n;o++)c=(t[Math.min(n,o+1)][0]-t[Math.max(0,o-1)][0])/(6*(1+e[o]*e[o])),s.push([c||0,e[o]*c||0]);return s};export const svgPath=t=>{let e="";for(let n=0;n<t.length;n++){const s=t[n],o=s.length;o>4?(e+=`C${s[0]}, ${s[1]}`,e+=`, ${s[2]}, ${s[3]}`,e+=`, ${s[4]}, ${s[5]}`):o>2&&(e+=`S${s[0]}, ${s[1]}`,e+=`, ${s[2]}, ${s[3]}`)}return e};export const spline={points(t){const e=tangents(t),n=t[1],s=t[0],o=[],l=e[1],r=e[0];o.push(s,[s[0]+r[0],s[1]+r[1],n[0]-l[0],n[1]-l[1],n[0],n[1]]);for(let n=2,s=e.length;n<s;n++){const s=t[n],l=e[n];o.push([s[0]-l[0],s[1]-l[1],s[0],s[1]])}return o},slice(t,e,n){const s=t.slice(e,n);if(e){if(n-e>1&&s[1].length<6){const t=s[0].length;s[1]=[2*s[0][t-2]-s[0][t-4],2*s[0][t-1]-s[0][t-3]].concat(s[1])}s[0]=s[0].slice(-2)}return s}};function slope(t,e){return(e[1]-t[1])/(e[0]-t[0])}function finiteDifferences(t){const e=[];let n=t[0],s=t[1],o=e[0]=slope(n,s),l=1;for(let r=t.length-1;l<r;l++)n=s,s=t[l+1],e[l]=.5*(o+(o=slope(n,s)));return e[l]=o,e}