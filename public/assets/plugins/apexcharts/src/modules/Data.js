import CoreUtils from"./CoreUtils";import DateTime from"./../utils/DateTime";import Series from"./Series";import Utils from"../utils/Utils";import Defaults from"./settings/Defaults";export default class Data{constructor(e){this.ctx=e,this.w=e.w,this.twoDSeries=[],this.threeDSeries=[],this.twoDSeriesX=[],this.seriesGoals=[],this.coreUtils=new CoreUtils(this.ctx)}isMultiFormat(){return this.isFormatXY()||this.isFormat2DArray()}isFormatXY(){const e=this.w.config.series.slice(),s=new Series(this.ctx);if(this.activeSeriesIndex=s.getActiveConfigSeriesIndex(),void 0!==e[this.activeSeriesIndex].data&&e[this.activeSeriesIndex].data.length>0&&null!==e[this.activeSeriesIndex].data[0]&&void 0!==e[this.activeSeriesIndex].data[0].x&&null!==e[this.activeSeriesIndex].data[0])return!0}isFormat2DArray(){const e=this.w.config.series.slice(),s=new Series(this.ctx);if(this.activeSeriesIndex=s.getActiveConfigSeriesIndex(),void 0!==e[this.activeSeriesIndex].data&&e[this.activeSeriesIndex].data.length>0&&void 0!==e[this.activeSeriesIndex].data[0]&&null!==e[this.activeSeriesIndex].data[0]&&e[this.activeSeriesIndex].data[0].constructor===Array)return!0}handleFormat2DArray(e,s){const a=this.w.config,t=this.w.globals,i="boxPlot"===a.chart.type||"boxPlot"===a.series[s].type;for(let r=0;r<e[s].data.length;r++)if(void 0!==e[s].data[r][1]&&(Array.isArray(e[s].data[r][1])&&4===e[s].data[r][1].length&&!i?this.twoDSeries.push(Utils.parseNumber(e[s].data[r][1][3])):e[s].data[r].length>=5?this.twoDSeries.push(Utils.parseNumber(e[s].data[r][4])):this.twoDSeries.push(Utils.parseNumber(e[s].data[r][1])),t.dataFormatXNumeric=!0),"datetime"===a.xaxis.type){let a=new Date(e[s].data[r][0]);a=new Date(a).getTime(),this.twoDSeriesX.push(a)}else this.twoDSeriesX.push(e[s].data[r][0]);for(let a=0;a<e[s].data.length;a++)void 0!==e[s].data[a][2]&&(this.threeDSeries.push(e[s].data[a][2]),t.isDataXYZ=!0)}handleFormatXY(e,s){const a=this.w.config,t=this.w.globals,i=new DateTime(this.ctx);let r=s;t.collapsedSeriesIndices.indexOf(s)>-1&&(r=this.activeSeriesIndex);for(let a=0;a<e[s].data.length;a++)void 0!==e[s].data[a].y&&(Array.isArray(e[s].data[a].y)?this.twoDSeries.push(Utils.parseNumber(e[s].data[a].y[e[s].data[a].y.length-1])):this.twoDSeries.push(Utils.parseNumber(e[s].data[a].y))),void 0!==e[s].data[a].goals&&Array.isArray(e[s].data[a].goals)?(void 0===this.seriesGoals[s]&&(this.seriesGoals[s]=[]),this.seriesGoals[s].push(e[s].data[a].goals)):(void 0===this.seriesGoals[s]&&(this.seriesGoals[s]=[]),this.seriesGoals[s].push(null));for(let s=0;s<e[r].data.length;s++){const l="string"==typeof e[r].data[s].x,o=Array.isArray(e[r].data[s].x),h=!o&&!!i.isValidDate(e[r].data[s].x);if(l||h)if(l||a.xaxis.convertedCatToNumeric){const l=t.isBarHorizontal&&t.isRangeData;"datetime"!==a.xaxis.type||l?(this.fallbackToCategory=!0,this.twoDSeriesX.push(e[r].data[s].x),isNaN(e[r].data[s].x)||"category"===this.w.config.xaxis.type||"string"==typeof e[r].data[s].x||(t.isXNumeric=!0)):this.twoDSeriesX.push(i.parseDate(e[r].data[s].x))}else"datetime"===a.xaxis.type?this.twoDSeriesX.push(i.parseDate(e[r].data[s].x.toString())):(t.dataFormatXNumeric=!0,t.isXNumeric=!0,this.twoDSeriesX.push(parseFloat(e[r].data[s].x)));else o?(this.fallbackToCategory=!0,this.twoDSeriesX.push(e[r].data[s].x)):(t.isXNumeric=!0,t.dataFormatXNumeric=!0,this.twoDSeriesX.push(e[r].data[s].x))}if(e[s].data[0]&&void 0!==e[s].data[0].z){for(let a=0;a<e[s].data.length;a++)this.threeDSeries.push(e[s].data[a].z);t.isDataXYZ=!0}}handleRangeData(e,s){const a=this.w.globals;let t={};return this.isFormat2DArray()?t=this.handleRangeDataFormat("array",e,s):this.isFormatXY()&&(t=this.handleRangeDataFormat("xy",e,s)),a.seriesRangeStart.push(void 0===t.start?[]:t.start),a.seriesRangeEnd.push(void 0===t.end?[]:t.end),a.seriesRange.push(t.rangeUniques),a.seriesRange.forEach(((e,s)=>{e&&e.forEach(((e,s)=>{e.y.forEach(((s,a)=>{for(let t=0;t<e.y.length;t++)if(a!==t){const a=s.y1,i=s.y2,r=e.y[t].y1;a<=e.y[t].y2&&r<=i&&(e.overlaps.indexOf(s.rangeName)<0&&e.overlaps.push(s.rangeName),e.overlaps.indexOf(e.y[t].rangeName)<0&&e.overlaps.push(e.y[t].rangeName))}}))}))})),t}handleCandleStickBoxData(e,s){const a=this.w.globals;let t={};return this.isFormat2DArray()?t=this.handleCandleStickBoxDataFormat("array",e,s):this.isFormatXY()&&(t=this.handleCandleStickBoxDataFormat("xy",e,s)),a.seriesCandleO[s]=t.o,a.seriesCandleH[s]=t.h,a.seriesCandleM[s]=t.m,a.seriesCandleL[s]=t.l,a.seriesCandleC[s]=t.c,t}handleRangeDataFormat(e,s,a){const t=[],i=[],r=s[a].data.filter(((e,s,a)=>s===a.findIndex((s=>s.x===e.x)))).map(((e,s)=>({x:e.x,overlaps:[],y:[]})));if("array"===e)for(let e=0;e<s[a].data.length;e++)Array.isArray(s[a].data[e])?(t.push(s[a].data[e][1][0]),i.push(s[a].data[e][1][1])):(t.push(s[a].data[e]),i.push(s[a].data[e]));else if("xy"===e)for(let e=0;e<s[a].data.length;e++){let l=Array.isArray(s[a].data[e].y);const o=Utils.randomId(),h=s[a].data[e].x,n={y1:l?s[a].data[e].y[0]:s[a].data[e].y,y2:l?s[a].data[e].y[1]:s[a].data[e].y,rangeName:o};s[a].data[e].rangeName=o;const d=r.findIndex((e=>e.x===h));r[d].y.push(n),t.push(n.y1),i.push(n.y2)}return{start:t,end:i,rangeUniques:r}}handleCandleStickBoxDataFormat(e,s,a){const t=this.w,i="boxPlot"===t.config.chart.type||"boxPlot"===t.config.series[a].type,r=[],l=[],o=[],h=[],n=[];if("array"===e)if(i&&6===s[a].data[0].length||!i&&5===s[a].data[0].length)for(let e=0;e<s[a].data.length;e++)r.push(s[a].data[e][1]),l.push(s[a].data[e][2]),i?(o.push(s[a].data[e][3]),h.push(s[a].data[e][4]),n.push(s[a].data[e][5])):(h.push(s[a].data[e][3]),n.push(s[a].data[e][4]));else for(let e=0;e<s[a].data.length;e++)Array.isArray(s[a].data[e][1])&&(r.push(s[a].data[e][1][0]),l.push(s[a].data[e][1][1]),i?(o.push(s[a].data[e][1][2]),h.push(s[a].data[e][1][3]),n.push(s[a].data[e][1][4])):(h.push(s[a].data[e][1][2]),n.push(s[a].data[e][1][3])));else if("xy"===e)for(let e=0;e<s[a].data.length;e++)Array.isArray(s[a].data[e].y)&&(r.push(s[a].data[e].y[0]),l.push(s[a].data[e].y[1]),i?(o.push(s[a].data[e].y[2]),h.push(s[a].data[e].y[3]),n.push(s[a].data[e].y[4])):(h.push(s[a].data[e].y[2]),n.push(s[a].data[e].y[3])));return{o:r,h:l,m:o,l:h,c:n}}parseDataAxisCharts(e,s=this.ctx){const a=this.w.config,t=this.w.globals,i=new DateTime(s),r=a.labels.length>0?a.labels.slice():a.xaxis.categories.slice();t.isRangeBar="rangeBar"===a.chart.type&&t.isBarHorizontal,t.hasXaxisGroups="category"===a.xaxis.type&&a.xaxis.group.groups.length>0,t.hasXaxisGroups&&(t.groups=a.xaxis.group.groups),e.forEach(((e,s)=>{void 0!==e.name?t.seriesNames.push(e.name):t.seriesNames.push("series-"+parseInt(s+1,10))})),this.coreUtils.setSeriesYAxisMappings();let l=[],o=[...new Set(a.series.map((e=>e.group)))];a.series.forEach(((e,s)=>{let a=o.indexOf(e.group);l[a]||(l[a]=[]),l[a].push(t.seriesNames[s])})),t.seriesGroups=l;const h=()=>{for(let e=0;e<r.length;e++)if("string"==typeof r[e]){if(!i.isValidDate(r[e]))throw new Error("You have provided invalid Date format. Please provide a valid JavaScript Date");this.twoDSeriesX.push(i.parseDate(r[e]))}else this.twoDSeriesX.push(r[e])};for(let s=0;s<e.length;s++){if(this.twoDSeries=[],this.twoDSeriesX=[],this.threeDSeries=[],void 0===e[s].data)return void console.error("It is a possibility that you may have not included 'data' property in series.");if("rangeBar"!==a.chart.type&&"rangeArea"!==a.chart.type&&"rangeBar"!==e[s].type&&"rangeArea"!==e[s].type||(t.isRangeData=!0,"rangeBar"!==a.chart.type&&"rangeArea"!==a.chart.type||this.handleRangeData(e,s)),this.isMultiFormat())this.isFormat2DArray()?this.handleFormat2DArray(e,s):this.isFormatXY()&&this.handleFormatXY(e,s),"candlestick"!==a.chart.type&&"candlestick"!==e[s].type&&"boxPlot"!==a.chart.type&&"boxPlot"!==e[s].type||this.handleCandleStickBoxData(e,s),t.series.push(this.twoDSeries),t.labels.push(this.twoDSeriesX),t.seriesX.push(this.twoDSeriesX),t.seriesGoals=this.seriesGoals,s!==this.activeSeriesIndex||this.fallbackToCategory||(t.isXNumeric=!0);else{"datetime"===a.xaxis.type?(t.isXNumeric=!0,h(),t.seriesX.push(this.twoDSeriesX)):"numeric"===a.xaxis.type&&(t.isXNumeric=!0,r.length>0&&(this.twoDSeriesX=r,t.seriesX.push(this.twoDSeriesX))),t.labels.push(this.twoDSeriesX);const i=e[s].data.map((e=>Utils.parseNumber(e)));t.series.push(i)}t.seriesZ.push(this.threeDSeries),void 0!==e[s].color?t.seriesColors.push(e[s].color):t.seriesColors.push(void 0)}return this.w}parseDataNonAxisCharts(e){const s=this.w.globals,a=this.w.config;s.series=e.slice(),s.seriesNames=a.labels.slice();for(let e=0;e<s.series.length;e++)void 0===s.seriesNames[e]&&s.seriesNames.push("series-"+(e+1));return this.w}handleExternalLabelsData(e){const s=this.w.config,a=this.w.globals;if(s.xaxis.categories.length>0)a.labels=s.xaxis.categories;else if(s.labels.length>0)a.labels=s.labels.slice();else if(this.fallbackToCategory){if(a.labels=a.labels[0],a.seriesRange.length&&(a.seriesRange.map((e=>{e.forEach((e=>{a.labels.indexOf(e.x)<0&&e.x&&a.labels.push(e.x)}))})),a.labels=Array.from(new Set(a.labels.map(JSON.stringify)),JSON.parse)),s.xaxis.convertedCatToNumeric){new Defaults(s).convertCatToNumericXaxis(s,this.ctx,a.seriesX[0]),this._generateExternalLabels(e)}}else this._generateExternalLabels(e)}_generateExternalLabels(e){const s=this.w.globals,a=this.w.config;let t=[];if(s.axisCharts){if(s.series.length>0)if(this.isFormatXY()){const e=a.series.map(((e,s)=>e.data.filter(((e,s,a)=>a.findIndex((s=>s.x===e.x))===s)))),s=e.reduce(((e,s,a,t)=>t[e].length>s.length?e:a),0);for(let a=0;a<e[s].length;a++)t.push(a+1)}else for(let e=0;e<s.series[s.maxValsInArrayIndex].length;e++)t.push(e+1);s.seriesX=[];for(let a=0;a<e.length;a++)s.seriesX.push(t);this.w.globals.isBarHorizontal||(s.isXNumeric=!0)}if(0===t.length){t=s.axisCharts?[]:s.series.map(((e,s)=>s+1));for(let a=0;a<e.length;a++)s.seriesX.push(t)}s.labels=t,a.xaxis.convertedCatToNumeric&&(s.categoryLabels=t.map((e=>a.xaxis.labels.formatter(e)))),s.noLabelsProvided=!0}parseData(e){let s=this.w,a=s.config,t=s.globals;if(this.excludeCollapsedSeriesInYAxis(),this.fallbackToCategory=!1,this.ctx.core.resetGlobals(),this.ctx.core.isMultipleY(),t.axisCharts?(this.parseDataAxisCharts(e),this.coreUtils.getLargestSeries()):this.parseDataNonAxisCharts(e),a.chart.stacked){const e=new Series(this.ctx);t.series=e.setNullSeriesToZeroValues(t.series)}this.coreUtils.getSeriesTotals(),t.axisCharts&&(t.stackedSeriesTotals=this.coreUtils.getStackedSeriesTotals(),t.stackedSeriesTotalsByGroups=this.coreUtils.getStackedSeriesTotalsByGroups()),this.coreUtils.getPercentSeries(),t.dataFormatXNumeric||t.isXNumeric&&("numeric"!==a.xaxis.type||0!==a.labels.length||0!==a.xaxis.categories.length)||this.handleExternalLabelsData(e);const i=this.coreUtils.getCategoryLabels(t.labels);for(let e=0;e<i.length;e++)if(Array.isArray(i[e])){t.isMultiLineX=!0;break}}excludeCollapsedSeriesInYAxis(){const e=this.w;let s=[];e.globals.seriesYAxisMap.forEach(((a,t)=>{let i=0;a.forEach((s=>{-1!==e.globals.collapsedSeriesIndices.indexOf(s)&&i++})),i>0&&i==a.length&&s.push(t)})),e.globals.ignoreYAxisIndexes=s.map((e=>e))}}