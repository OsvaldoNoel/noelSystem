import Formatters from"../Formatters";import DateTime from"../../utils/DateTime";import Utils from"./Utils";export default class Labels{constructor(t){this.w=t.w,this.ctx=t.ctx,this.ttCtx=t,this.tooltipUtil=new Utils(t)}drawSeriesTexts({shared:t=!0,ttItems:e,i:l=0,j:s=null,y1:o,y2:i,e:a}){let r=this.w;void 0!==r.config.tooltip.custom?this.handleCustomTooltip({i:l,j:s,y1:o,y2:i,w:r}):this.toggleActiveInactiveSeries(t);let n=this.getValuesToPrint({i:l,j:s});this.printLabels({i:l,j:s,values:n,ttItems:e,shared:t,e:a});const g=this.ttCtx.getElTooltip();this.ttCtx.tooltipRect.ttWidth=g.getBoundingClientRect().width,this.ttCtx.tooltipRect.ttHeight=g.getBoundingClientRect().height}printLabels({i:t,j:e,values:l,ttItems:s,shared:o,e:i}){const a=this.w;let r,n=[];const g=t=>a.globals.seriesGoals[t]&&a.globals.seriesGoals[t][e]&&Array.isArray(a.globals.seriesGoals[t][e]),{xVal:c,zVal:d,xAxisTTVal:p}=l;let b="",x=a.globals.colors[t];null!==e&&a.config.plotOptions.bar.distributed&&(x=a.globals.colors[e]);for(let l=0,y=a.globals.series.length-1;l<a.globals.series.length;l++,y--){let m=this.getFormatters(t);b=this.getSeriesName({fn:m.yLbTitleFormatter,index:t,seriesIndex:t,j:e}),"treemap"===a.config.chart.type&&(b=m.yLbTitleFormatter(String(a.config.series[t].data[e].x),{series:a.globals.series,seriesIndex:t,dataPointIndex:e,w:a}));const h=a.config.tooltip.inverseOrder?y:l;if(a.globals.axisCharts){const l=t=>a.globals.isRangeData?m.yLbFormatter(a.globals.seriesRangeStart?.[t]?.[e],{series:a.globals.seriesRangeStart,seriesIndex:t,dataPointIndex:e,w:a})+" - "+m.yLbFormatter(a.globals.seriesRangeEnd?.[t]?.[e],{series:a.globals.seriesRangeEnd,seriesIndex:t,dataPointIndex:e,w:a}):m.yLbFormatter(a.globals.series[t][e],{series:a.globals.series,seriesIndex:t,dataPointIndex:e,w:a});if(o)m=this.getFormatters(h),b=this.getSeriesName({fn:m.yLbTitleFormatter,index:h,seriesIndex:t,j:e}),x=a.globals.colors[h],r=l(h),g(h)&&(n=a.globals.seriesGoals[h][e].map((t=>({attrs:t,val:m.yLbFormatter(t.value,{seriesIndex:h,dataPointIndex:e,w:a})}))));else{const s=i?.target?.getAttribute("fill");s&&(x=-1!==s.indexOf("url")?document.querySelector(s.substr(4).slice(0,-1)).childNodes[0].getAttribute("stroke"):s),r=l(t),g(t)&&Array.isArray(a.globals.seriesGoals[t][e])&&(n=a.globals.seriesGoals[t][e].map((l=>({attrs:l,val:m.yLbFormatter(l.value,{seriesIndex:t,dataPointIndex:e,w:a})}))))}}null===e&&(r=m.yLbFormatter(a.globals.series[t],{...a,seriesIndex:t,dataPointIndex:t})),this.DOMHandling({i:t,t:h,j:e,ttItems:s,values:{val:r,goalVals:n,xVal:c,xAxisTTVal:p,zVal:d},seriesName:b,shared:o,pColor:x})}}getFormatters(t){const e=this.w;let l,s=e.globals.yLabelFormatters[t];return void 0!==e.globals.ttVal?Array.isArray(e.globals.ttVal)?(s=e.globals.ttVal[t]&&e.globals.ttVal[t].formatter,l=e.globals.ttVal[t]&&e.globals.ttVal[t].title&&e.globals.ttVal[t].title.formatter):(s=e.globals.ttVal.formatter,"function"==typeof e.globals.ttVal.title.formatter&&(l=e.globals.ttVal.title.formatter)):l=e.config.tooltip.y.title.formatter,"function"!=typeof s&&(s=e.globals.yLabelFormatters[0]?e.globals.yLabelFormatters[0]:function(t){return t}),"function"!=typeof l&&(l=function(t){return t}),{yLbFormatter:s,yLbTitleFormatter:l}}getSeriesName({fn:t,index:e,seriesIndex:l,j:s}){const o=this.w;return t(String(o.globals.seriesNames[e]),{series:o.globals.series,seriesIndex:l,dataPointIndex:s,w:o})}DOMHandling({i:t,t:e,j:l,ttItems:s,values:o,seriesName:i,shared:a,pColor:r}){const n=this.w,g=this.ttCtx,{val:c,goalVals:d,xVal:p,xAxisTTVal:b,zVal:x}=o;let y=null;y=s[e].children,n.config.tooltip.fillSeriesColor&&(s[e].style.backgroundColor=r,y[0].style.display="none"),g.showTooltipTitle&&(null===g.tooltipTitle&&(g.tooltipTitle=n.globals.dom.baseEl.querySelector(".apexcharts-tooltip-title")),g.tooltipTitle.innerHTML=p),g.isXAxisTooltipEnabled&&(g.xaxisTooltipText.innerHTML=""!==b?b:p);const m=s[e].querySelector(".apexcharts-tooltip-text-y-label");m&&(m.innerHTML=i||"");const h=s[e].querySelector(".apexcharts-tooltip-text-y-value");h&&(h.innerHTML=void 0!==c?c:""),y[0]&&y[0].classList.contains("apexcharts-tooltip-marker")&&(n.config.tooltip.marker.fillColors&&Array.isArray(n.config.tooltip.marker.fillColors)&&(r=n.config.tooltip.marker.fillColors[e]),y[0].style.backgroundColor=r),n.config.tooltip.marker.show||(y[0].style.display="none");const f=s[e].querySelector(".apexcharts-tooltip-text-goals-label"),u=s[e].querySelector(".apexcharts-tooltip-text-goals-value");if(d.length&&n.globals.seriesGoals[e]){const t=()=>{let t="<div >",e="<div>";d.forEach(((l,s)=>{t+=` <div style="display: flex"><span class="apexcharts-tooltip-marker" style="background-color: ${l.attrs.strokeColor}; height: 3px; border-radius: 0; top: 5px;"></span> ${l.attrs.name}</div>`,e+=`<div>${l.val}</div>`})),f.innerHTML=t+"</div>",u.innerHTML=e+"</div>"};a?n.globals.seriesGoals[e][l]&&Array.isArray(n.globals.seriesGoals[e][l])?t():(f.innerHTML="",u.innerHTML=""):t()}else f.innerHTML="",u.innerHTML="";if(null!==x){s[e].querySelector(".apexcharts-tooltip-text-z-label").innerHTML=n.config.tooltip.z.title;s[e].querySelector(".apexcharts-tooltip-text-z-value").innerHTML=void 0!==x?x:""}if(a&&y[0]){if(n.config.tooltip.hideEmptySeries){let t=s[e].querySelector(".apexcharts-tooltip-marker"),l=s[e].querySelector(".apexcharts-tooltip-text");0==parseFloat(c)?(t.style.display="none",l.style.display="none"):(t.style.display="block",l.style.display="block")}null==c||n.globals.ancillaryCollapsedSeriesIndices.indexOf(e)>-1||n.globals.collapsedSeriesIndices.indexOf(e)>-1?y[0].parentNode.style.display="none":y[0].parentNode.style.display=n.config.tooltip.items.display}}toggleActiveInactiveSeries(t){const e=this.w;if(t)this.tooltipUtil.toggleAllTooltipSeriesGroups("enable");else{this.tooltipUtil.toggleAllTooltipSeriesGroups("disable");let t=e.globals.dom.baseEl.querySelector(".apexcharts-tooltip-series-group");t&&(t.classList.add("apexcharts-active"),t.style.display=e.config.tooltip.items.display)}}getValuesToPrint({i:t,j:e}){const l=this.w,s=this.ctx.series.filteredSeriesX();let o="",i="",a=null,r=null;const n={series:l.globals.series,seriesIndex:t,dataPointIndex:e,w:l};let g=l.globals.ttZFormatter;if(null===e)r=l.globals.series[t];else if(l.globals.isXNumeric&&"treemap"!==l.config.chart.type){if(o=s[t][e],0===s[t].length){o=s[this.tooltipUtil.getFirstActiveXArray(s)][e]}}else o=void 0!==l.globals.labels[e]?l.globals.labels[e]:"";let c=o;if(l.globals.isXNumeric&&"datetime"===l.config.xaxis.type){o=new Formatters(this.ctx).xLabelFormat(l.globals.ttKeyFormatter,c,c,{i:void 0,dateFormatter:new DateTime(this.ctx).formatDate,w:this.w})}else o=l.globals.isBarHorizontal?l.globals.yLabelFormatters[0](c,n):l.globals.xLabelFormatter(c,n);return void 0!==l.config.tooltip.x.formatter&&(o=l.globals.ttKeyFormatter(c,n)),l.globals.seriesZ.length>0&&l.globals.seriesZ[t].length>0&&(a=g(l.globals.seriesZ[t][e],l)),i="function"==typeof l.config.xaxis.tooltip.formatter?l.globals.xaxisTooltipFormatter(c,n):o,{val:Array.isArray(r)?r.join(" "):r,xVal:Array.isArray(o)?o.join(" "):o,xAxisTTVal:Array.isArray(i)?i.join(" "):i,zVal:a}}handleCustomTooltip({i:t,j:e,y1:l,y2:s,w:o}){const i=this.ttCtx.getElTooltip();let a=o.config.tooltip.custom;Array.isArray(a)&&a[t]&&(a=a[t]),i.innerHTML=a({ctx:this.ctx,series:o.globals.series,seriesIndex:t,dataPointIndex:e,y1:l,y2:s,w:o})}}