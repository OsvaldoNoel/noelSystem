import CoreUtils from"../CoreUtils";export default class Helpers{constructor(t){this.w=t.w,this.annoCtx=t}setOrientations(t,e=null){let l=this.w;if("vertical"===t.label.orientation){const a=null!==e?e:0;let i=l.globals.dom.baseEl.querySelector(`.apexcharts-xaxis-annotations .apexcharts-xaxis-annotation-label[rel='${a}']`);if(null!==i){const e=i.getBoundingClientRect();i.setAttribute("x",parseFloat(i.getAttribute("x"))-e.height+4),"top"===t.label.position?i.setAttribute("y",parseFloat(i.getAttribute("y"))+e.width):i.setAttribute("y",parseFloat(i.getAttribute("y"))-e.width);let l=this.annoCtx.graphics.rotateAroundCenter(i);const a=l.x,s=l.y;i.setAttribute("transform",`rotate(-90 ${a} ${s})`)}}}addBackgroundToAnno(t,e){const l=this.w;if(!t||void 0===e.label.text||void 0!==e.label.text&&!String(e.label.text).trim())return null;const a=l.globals.dom.baseEl.querySelector(".apexcharts-grid").getBoundingClientRect(),i=t.getBoundingClientRect();let s=e.label.style.padding.left,o=e.label.style.padding.right,n=e.label.style.padding.top,r=e.label.style.padding.bottom;"vertical"===e.label.orientation&&(n=e.label.style.padding.left,r=e.label.style.padding.right,s=e.label.style.padding.top,o=e.label.style.padding.bottom);const g=i.left-a.left-s,d=i.top-a.top-n,b=this.annoCtx.graphics.drawRect(g-l.globals.barPadForNumericAxis,d,i.width+s+o,i.height+n+r,e.label.borderRadius,e.label.style.background,1,e.label.borderWidth,e.label.borderColor,0);return e.id&&b.node.classList.add(e.id),b}annotationsBackground(){const t=this.w,e=(e,l,a)=>{let i=t.globals.dom.baseEl.querySelector(`.apexcharts-${a}-annotations .apexcharts-${a}-annotation-label[rel='${l}']`);if(i){const t=i.parentNode,l=this.addBackgroundToAnno(i,e);l&&(t.insertBefore(l.node,i),e.label.mouseEnter&&l.node.addEventListener("mouseenter",e.label.mouseEnter.bind(this,e)),e.label.mouseLeave&&l.node.addEventListener("mouseleave",e.label.mouseLeave.bind(this,e)),e.label.click&&l.node.addEventListener("click",e.label.click.bind(this,e)))}};t.config.annotations.xaxis.map(((t,l)=>{e(t,l,"xaxis")})),t.config.annotations.yaxis.map(((t,l)=>{e(t,l,"yaxis")})),t.config.annotations.points.map(((t,l)=>{e(t,l,"point")}))}getY1Y2(t,e){let l,a="y1"===t?e.y:e.y2,i=!1;const s=this.w;if(this.annoCtx.invertAxis){let t=s.globals.labels;s.config.xaxis.convertedCatToNumeric&&(t=s.globals.categoryLabels);let i=t.indexOf(a);const o=s.globals.dom.baseEl.querySelector(".apexcharts-yaxis-texts-g text:nth-child("+(i+1)+")");l=o?parseFloat(o.getAttribute("y")):(s.globals.gridHeight/t.length-1)*(i+1)-s.globals.barHeight,void 0!==e.seriesIndex&&s.globals.barHeight&&(l=l-s.globals.barHeight/2*(s.globals.series.length-1)+s.globals.barHeight*e.seriesIndex)}else{let t,o=s.globals.seriesYAxisMap[e.yAxisIndex][0];if(s.config.yaxis[e.yAxisIndex].logarithmic){a=new CoreUtils(this.annoCtx.ctx).getLogVal(s.config.yaxis[e.yAxisIndex].logBase,a,o),t=a/s.globals.yLogRatio[o]}else t=(a-s.globals.minYArr[o])/(s.globals.yRange[o]/s.globals.gridHeight);t>s.globals.gridHeight?(t=s.globals.gridHeight,i=!0):t<0&&(t=0,i=!0),l=s.globals.gridHeight-t,!e.marker||void 0!==e.y&&null!==e.y||(l=0),s.config.yaxis[e.yAxisIndex]&&s.config.yaxis[e.yAxisIndex].reversed&&(l=t)}return"string"==typeof a&&a.indexOf("px")>-1&&(l=parseFloat(a)),{yP:l,clipped:i}}getX1X2(t,e){let l="x1"===t?e.x:e.x2;const a=this.w;let i=this.annoCtx.invertAxis?a.globals.minY:a.globals.minX,s=this.annoCtx.invertAxis?a.globals.maxY:a.globals.maxX;const o=this.annoCtx.invertAxis?a.globals.yRange[0]:a.globals.xRange;let n,r=!1;return n=this.annoCtx.inversedReversedAxis?(s-l)/(o/a.globals.gridWidth):(l-i)/(o/a.globals.gridWidth),"category"!==a.config.xaxis.type&&!a.config.xaxis.convertedCatToNumeric||this.annoCtx.invertAxis||a.globals.dataFormatXNumeric||a.config.chart.sparkline.enabled||(n=this.getStringX(l)),"string"==typeof l&&l.indexOf("px")>-1&&(n=parseFloat(l)),null==l&&e.marker&&(n=a.globals.gridWidth),void 0!==e.seriesIndex&&a.globals.barWidth&&!this.annoCtx.invertAxis&&(n=n-a.globals.barWidth/2*(a.globals.series.length-1)+a.globals.barWidth*e.seriesIndex),n>a.globals.gridWidth?(n=a.globals.gridWidth,r=!0):n<0&&(n=0,r=!0),{x:n,clipped:r}}getStringX(t){const e=this.w;let l=t;e.config.xaxis.convertedCatToNumeric&&e.globals.categoryLabels.length&&(t=e.globals.categoryLabels.indexOf(t)+1);let a=e.globals.labels.indexOf(t);const i=e.globals.dom.baseEl.querySelector(".apexcharts-xaxis-texts-g text:nth-child("+(a+1)+")");return i&&(l=parseFloat(i.getAttribute("x"))),l}}