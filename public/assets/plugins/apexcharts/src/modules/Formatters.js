import DateTime from"../utils/DateTime";import Utils from"../utils/Utils";class Formatters{constructor(t){this.ctx=t,this.w=t.w,this.tooltipKeyFormat="dd MMM"}xLabelFormat(t,o,e,a){let r=this.w;if("datetime"===r.config.xaxis.type&&void 0===r.config.xaxis.labels.formatter&&void 0===r.config.tooltip.x.formatter){let t=new DateTime(this.ctx);return t.formatDate(t.getDate(o),r.config.tooltip.x.format)}return t(o,e,a)}defaultGeneralFormatter(t){return Array.isArray(t)?t.map((t=>t)):t}defaultYFormatter(t,o,e){let a=this.w;if(Utils.isNumber(t))if(0!==a.globals.yValueDecimal)t=t.toFixed(void 0!==o.decimalsInFloat?o.decimalsInFloat:a.globals.yValueDecimal);else{const o=t.toFixed(0);t=t==o?o:t.toFixed(1)}return t}setLabelFormatters(){let t=this.w;return t.globals.xaxisTooltipFormatter=t=>this.defaultGeneralFormatter(t),t.globals.ttKeyFormatter=t=>this.defaultGeneralFormatter(t),t.globals.ttZFormatter=t=>t,t.globals.legendFormatter=t=>this.defaultGeneralFormatter(t),void 0!==t.config.xaxis.labels.formatter?t.globals.xLabelFormatter=t.config.xaxis.labels.formatter:t.globals.xLabelFormatter=o=>{if(Utils.isNumber(o)){if(!t.config.xaxis.convertedCatToNumeric&&"numeric"===t.config.xaxis.type){if(Utils.isNumber(t.config.xaxis.decimalsInFloat))return o.toFixed(t.config.xaxis.decimalsInFloat);{const e=t.globals.maxX-t.globals.minX;return e>0&&e<100?o.toFixed(1):o.toFixed(0)}}if(t.globals.isBarHorizontal){if(t.globals.maxY-t.globals.minYArr<4)return o.toFixed(1)}return o.toFixed(0)}return o},"function"==typeof t.config.tooltip.x.formatter?t.globals.ttKeyFormatter=t.config.tooltip.x.formatter:t.globals.ttKeyFormatter=t.globals.xLabelFormatter,"function"==typeof t.config.xaxis.tooltip.formatter&&(t.globals.xaxisTooltipFormatter=t.config.xaxis.tooltip.formatter),(Array.isArray(t.config.tooltip.y)||void 0!==t.config.tooltip.y.formatter)&&(t.globals.ttVal=t.config.tooltip.y),void 0!==t.config.tooltip.z.formatter&&(t.globals.ttZFormatter=t.config.tooltip.z.formatter),void 0!==t.config.legend.formatter&&(t.globals.legendFormatter=t.config.legend.formatter),t.config.yaxis.forEach(((o,e)=>{void 0!==o.labels.formatter?t.globals.yLabelFormatters[e]=o.labels.formatter:t.globals.yLabelFormatters[e]=a=>t.globals.xyCharts?Array.isArray(a)?a.map((t=>this.defaultYFormatter(t,o,e))):this.defaultYFormatter(a,o,e):a})),t.globals}heatmapLabelFormatters(){const t=this.w;if("heatmap"===t.config.chart.type){t.globals.yAxisScale[0].result=t.globals.seriesNames.slice();let o=t.globals.seriesNames.reduce(((t,o)=>t.length>o.length?t:o),0);t.globals.yAxisScale[0].niceMax=o,t.globals.yAxisScale[0].niceMin=o}}}export default Formatters;