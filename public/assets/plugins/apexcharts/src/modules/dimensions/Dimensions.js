import YAxis from"../axes/YAxis";import Helpers from"./Helpers";import DimXAxis from"./XAxis";import DimYAxis from"./YAxis";import Grid from"./Grid";export default class Dimensions{constructor(i){this.ctx=i,this.w=i.w,this.lgRect={},this.yAxisWidth=0,this.yAxisWidthLeft=0,this.yAxisWidthRight=0,this.xAxisHeight=0,this.isSparkline=this.w.config.chart.sparkline.enabled,this.dimHelpers=new Helpers(this),this.dimYAxis=new DimYAxis(this),this.dimXAxis=new DimXAxis(this),this.dimGrid=new Grid(this),this.lgWidthForSideLegends=0,this.gridPad=this.w.config.grid.padding,this.xPadRight=0,this.xPadLeft=0}plotCoords(){let i=this.w,t=i.globals;this.lgRect=this.dimHelpers.getLegendsRect(),this.datalabelsCoords={width:0,height:0};const s=Array.isArray(i.config.stroke.width)?Math.max(...i.config.stroke.width):i.config.stroke.width;this.isSparkline&&((i.config.markers.discrete.length>0||i.config.markers.size>0)&&Object.entries(this.gridPad).forEach((([i,t])=>{this.gridPad[i]=Math.max(t,this.w.globals.markers.largestSize/1.5)})),this.gridPad.top=Math.max(s/2,this.gridPad.top),this.gridPad.bottom=Math.max(s/2,this.gridPad.bottom)),t.axisCharts?this.setDimensionsForAxisCharts():this.setDimensionsForNonAxisCharts(),this.dimGrid.gridPadFortitleSubtitle(),t.gridHeight=t.gridHeight-this.gridPad.top-this.gridPad.bottom,t.gridWidth=t.gridWidth-this.gridPad.left-this.gridPad.right-this.xPadRight-this.xPadLeft;let e=this.dimGrid.gridPadForColumnsInNumericAxis(t.gridWidth);t.gridWidth=t.gridWidth-2*e,t.translateX=t.translateX+this.gridPad.left+this.xPadLeft+(e>0?e:0),t.translateY=t.translateY+this.gridPad.top}setDimensionsForAxisCharts(){let i=this.w,t=i.globals,s=this.dimYAxis.getyAxisLabelsCoords(),e=this.dimYAxis.getyAxisTitleCoords();t.isSlopeChart&&(this.datalabelsCoords=this.dimHelpers.getDatalabelsRect()),i.globals.yLabelsCoords=[],i.globals.yTitleCoords=[],i.config.yaxis.map(((t,h)=>{i.globals.yLabelsCoords.push({width:s[h].width,index:h}),i.globals.yTitleCoords.push({width:e[h].width,index:h})})),this.yAxisWidth=this.dimYAxis.getTotalYAxisWidth();let h=this.dimXAxis.getxAxisLabelsCoords(),a=this.dimXAxis.getxAxisGroupLabelsCoords(),d=this.dimXAxis.getxAxisTitleCoords();this.conditionalChecksForAxisCoords(h,d,a),t.translateXAxisY=i.globals.rotateXLabels?this.xAxisHeight/8:-4,t.translateXAxisX=i.globals.rotateXLabels&&i.globals.isXNumeric&&i.config.xaxis.labels.rotate<=-45?-this.xAxisWidth/4:0,i.globals.isBarHorizontal&&(t.rotateXLabels=!1,t.translateXAxisY=parseInt(i.config.xaxis.labels.style.fontSize,10)/1.5*-1),t.translateXAxisY=t.translateXAxisY+i.config.xaxis.labels.offsetY,t.translateXAxisX=t.translateXAxisX+i.config.xaxis.labels.offsetX;let g=this.yAxisWidth,r=this.xAxisHeight;t.xAxisLabelsHeight=this.xAxisHeight-d.height,t.xAxisGroupLabelsHeight=t.xAxisLabelsHeight-h.height,t.xAxisLabelsWidth=this.xAxisWidth,t.xAxisHeight=this.xAxisHeight;let o=10;("radar"===i.config.chart.type||this.isSparkline)&&(g=0,r=t.goldenPadding),this.isSparkline&&(this.lgRect={height:0,width:0}),(this.isSparkline||"treemap"===i.config.chart.type)&&(g=0,r=0,o=0),this.isSparkline||this.dimXAxis.additionalPaddingXLabels(h);const l=()=>{t.translateX=g+this.datalabelsCoords.width,t.gridHeight=t.svgHeight-this.lgRect.height-r-(this.isSparkline||"treemap"===i.config.chart.type?0:i.globals.rotateXLabels?10:15),t.gridWidth=t.svgWidth-g-2*this.datalabelsCoords.width};switch("top"===i.config.xaxis.position&&(o=t.xAxisHeight-i.config.xaxis.axisTicks.height-5),i.config.legend.position){case"bottom":t.translateY=o,l();break;case"top":t.translateY=this.lgRect.height+o,l();break;case"left":t.translateY=o,t.translateX=this.lgRect.width+g+this.datalabelsCoords.width,t.gridHeight=t.svgHeight-r-12,t.gridWidth=t.svgWidth-this.lgRect.width-g-2*this.datalabelsCoords.width;break;case"right":t.translateY=o,t.translateX=g+this.datalabelsCoords.width,t.gridHeight=t.svgHeight-r-12,t.gridWidth=t.svgWidth-this.lgRect.width-g-2*this.datalabelsCoords.width-5;break;default:throw new Error("Legend position not supported")}this.dimGrid.setGridXPosForDualYAxis(e,s),new YAxis(this.ctx).setYAxisXPosition(s,e)}setDimensionsForNonAxisCharts(){let i=this.w,t=i.globals,s=i.config,e=0;i.config.legend.show&&!i.config.legend.floating&&(e=20);const h="pie"===s.chart.type||"polarArea"===s.chart.type||"donut"===s.chart.type?"pie":"radialBar";let a=s.plotOptions[h].offsetY,d=s.plotOptions[h].offsetX;if(!s.legend.show||s.legend.floating)return t.gridHeight=t.svgHeight-s.grid.padding.left+s.grid.padding.right,t.gridWidth=Math.min(t.svgWidth,t.gridHeight),t.translateY=a,void(t.translateX=d+(t.svgWidth-t.gridWidth)/2);switch(s.legend.position){case"bottom":t.gridHeight=t.svgHeight-this.lgRect.height-t.goldenPadding,t.gridWidth=t.svgWidth,t.translateY=a-10,t.translateX=d+(t.svgWidth-t.gridWidth)/2;break;case"top":t.gridHeight=t.svgHeight-this.lgRect.height-t.goldenPadding,t.gridWidth=t.svgWidth,t.translateY=this.lgRect.height+a+10,t.translateX=d+(t.svgWidth-t.gridWidth)/2;break;case"left":t.gridWidth=t.svgWidth-this.lgRect.width-e,t.gridHeight="auto"!==s.chart.height?t.svgHeight:t.gridWidth,t.translateY=a,t.translateX=d+this.lgRect.width+e;break;case"right":t.gridWidth=t.svgWidth-this.lgRect.width-e-5,t.gridHeight="auto"!==s.chart.height?t.svgHeight:t.gridWidth,t.translateY=a,t.translateX=d+10;break;default:throw new Error("Legend position not supported")}}conditionalChecksForAxisCoords(i,t,s){const e=this.w,h=e.globals.hasXaxisGroups?2:1,a=s.height+i.height+t.height,d=e.globals.isMultiLineX?1.2:e.globals.LINE_HEIGHT_RATIO,g=e.globals.rotateXLabels?22:10,r=e.globals.rotateXLabels&&"bottom"===e.config.legend.position?10:0;this.xAxisHeight=a*d+h*g+r,this.xAxisWidth=i.width,this.xAxisHeight-t.height>e.config.xaxis.labels.maxHeight&&(this.xAxisHeight=e.config.xaxis.labels.maxHeight),e.config.xaxis.labels.minHeight&&this.xAxisHeight<e.config.xaxis.labels.minHeight&&(this.xAxisHeight=e.config.xaxis.labels.minHeight),e.config.xaxis.floating&&(this.xAxisHeight=0);let o=0,l=0;e.config.yaxis.forEach((i=>{o+=i.labels.minWidth,l+=i.labels.maxWidth})),this.yAxisWidth<o&&(this.yAxisWidth=o),this.yAxisWidth>l&&(this.yAxisWidth=l)}}