import Filters from"./Filters";import Graphics from"./Graphics";import Utils from"../utils/Utils";export default class Markers{constructor(r,e){this.ctx=r,this.w=r.w}setGlobalMarkerSize(){const r=this.w;if(r.globals.markers.size=Array.isArray(r.config.markers.size)?r.config.markers.size:[r.config.markers.size],r.globals.markers.size.length>0){if(r.globals.markers.size.length<r.globals.series.length+1)for(let e=0;e<=r.globals.series.length;e++)void 0===r.globals.markers.size[e]&&r.globals.markers.size.push(r.globals.markers.size[0])}else r.globals.markers.size=r.config.series.map((e=>r.config.markers.size))}plotChartMarkers(r,e,s,t,i=!1){let a,o=this.w,l=e,n=r,c=null,d=new Graphics(this.ctx);const h=o.config.markers.discrete&&o.config.markers.discrete.length;if((o.globals.markers.size[e]>0||i||h)&&(c=d.group({class:i||h?"":"apexcharts-series-markers"}),c.attr("clip-path",`url(#gridRectMarkerMask${o.globals.cuid})`)),Array.isArray(n.x))for(let r=0;r<n.x.length;r++){let g=s;1===s&&0===r&&(g=0),1===s&&1===r&&(g=1);let p="apexcharts-marker";"line"!==o.config.chart.type&&"area"!==o.config.chart.type||o.globals.comboCharts||o.config.tooltip.intersect||(p+=" no-pointer-events");if((Array.isArray(o.config.markers.size)?o.globals.markers.size[e]>0:o.config.markers.size>0)||i||h){Utils.isNumber(n.y[r])?p+=` w${Utils.randomId()}`:p="apexcharts-nullpoint";let s=this.getMarkerConfig({cssClass:p,seriesIndex:e,dataPointIndex:g});o.config.series[l].data[g]&&(o.config.series[l].data[g].fillColor&&(s.pointFillColor=o.config.series[l].data[g].fillColor),o.config.series[l].data[g].strokeColor&&(s.pointStrokeColor=o.config.series[l].data[g].strokeColor)),t&&(s.pSize=t),(n.x[r]<-o.globals.markers.largestSize||n.x[r]>o.globals.gridWidth+o.globals.markers.largestSize||n.y[r]<-o.globals.markers.largestSize||n.y[r]>o.globals.gridHeight+o.globals.markers.largestSize)&&(s.pSize=0),a=d.drawMarker(n.x[r],n.y[r],s),a.attr("rel",g),a.attr("j",g),a.attr("index",e),a.node.setAttribute("default-marker-size",s.pSize);new Filters(this.ctx).setSelectionFilter(a,e,g),this.addEvents(a),c&&c.add(a)}else void 0===o.globals.pointsArray[e]&&(o.globals.pointsArray[e]=[]),o.globals.pointsArray[e].push([n.x[r],n.y[r]])}return c}getMarkerConfig({cssClass:r,seriesIndex:e,dataPointIndex:s=null,finishRadius:t=null}){const i=this.w;let a=this.getMarkerStyle(e),o=i.globals.markers.size[e];const l=i.config.markers;return null!==s&&l.discrete.length&&l.discrete.map((r=>{r.seriesIndex===e&&r.dataPointIndex===s&&(a.pointStrokeColor=r.strokeColor,a.pointFillColor=r.fillColor,o=r.size,a.pointShape=r.shape)})),{pSize:null===t?o:t,pRadius:l.radius,width:Array.isArray(l.width)?l.width[e]:l.width,height:Array.isArray(l.height)?l.height[e]:l.height,pointStrokeWidth:Array.isArray(l.strokeWidth)?l.strokeWidth[e]:l.strokeWidth,pointStrokeColor:a.pointStrokeColor,pointFillColor:a.pointFillColor,shape:a.pointShape||(Array.isArray(l.shape)?l.shape[e]:l.shape),class:r,pointStrokeOpacity:Array.isArray(l.strokeOpacity)?l.strokeOpacity[e]:l.strokeOpacity,pointStrokeDashArray:Array.isArray(l.strokeDashArray)?l.strokeDashArray[e]:l.strokeDashArray,pointFillOpacity:Array.isArray(l.fillOpacity)?l.fillOpacity[e]:l.fillOpacity,seriesIndex:e}}addEvents(r){const e=this.w,s=new Graphics(this.ctx);r.node.addEventListener("mouseenter",s.pathMouseEnter.bind(this.ctx,r)),r.node.addEventListener("mouseleave",s.pathMouseLeave.bind(this.ctx,r)),r.node.addEventListener("mousedown",s.pathMouseDown.bind(this.ctx,r)),r.node.addEventListener("click",e.config.markers.onClick),r.node.addEventListener("dblclick",e.config.markers.onDblClick),r.node.addEventListener("touchstart",s.pathMouseDown.bind(this.ctx,r),{passive:!0})}getMarkerStyle(r){let e=this.w,s=e.globals.markers.colors,t=e.config.markers.strokeColor||e.config.markers.strokeColors;return{pointStrokeColor:Array.isArray(t)?t[r]:t,pointFillColor:Array.isArray(s)?s[r]:s}}}