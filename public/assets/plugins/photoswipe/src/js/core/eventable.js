class PhotoSwipeEvent{constructor(t,s){this.type=t,this.defaultPrevented=!1,s&&Object.assign(this,s)}preventDefault(){this.defaultPrevented=!0}}class Eventable{constructor(){this._listeners={},this._filters={},this.pswp=void 0,this.options=void 0}addFilter(t,s,i=100){this._filters[t]||(this._filters[t]=[]),this._filters[t]?.push({fn:s,priority:i}),this._filters[t]?.sort(((t,s)=>t.priority-s.priority)),this.pswp?.addFilter(t,s,i)}removeFilter(t,s){this._filters[t]&&(this._filters[t]=this._filters[t].filter((t=>t.fn!==s))),this.pswp&&this.pswp.removeFilter(t,s)}applyFilters(t,...s){return this._filters[t]?.forEach((t=>{s[0]=t.fn.apply(this,s)})),s[0]}on(t,s){this._listeners[t]||(this._listeners[t]=[]),this._listeners[t]?.push(s),this.pswp?.on(t,s)}off(t,s){this._listeners[t]&&(this._listeners[t]=this._listeners[t].filter((t=>s!==t))),this.pswp?.off(t,s)}dispatch(t,s){if(this.pswp)return this.pswp.dispatch(t,s);const i=new PhotoSwipeEvent(t,s);return this._listeners[t]?.forEach((t=>{t.call(this,i)})),i}}export default Eventable;