import{equalizePoints,roundPoint,clamp}from"../util/util.js";const PAN_END_FRICTION=.35,VERTICAL_DRAG_FRICTION=.6,MIN_RATIO_TO_CLOSE=.4,MIN_NEXT_SLIDE_SPEED=.5;function project(t,i){return t*i/(1-i)}class DragHandler{constructor(t){this.gestures=t,this.pswp=t.pswp,this.startPan={x:0,y:0}}start(){this.pswp.currSlide&&equalizePoints(this.startPan,this.pswp.currSlide.pan),this.pswp.animations.stopAll()}change(){const{p1:t,prevP1:i,dragAxis:s}=this.gestures,{currSlide:e}=this.pswp;if("y"===s&&this.pswp.options.closeOnVerticalDrag&&e&&e.currZoomLevel<=e.zoomLevels.fit&&!this.gestures.isMultitouch){const s=e.pan.y+(t.y-i.y);if(!this.pswp.dispatch("verticalDrag",{panY:s}).defaultPrevented){this._setPanWithFriction("y",s,.6);const t=1-Math.abs(this._getVerticalDragRatio(e.pan.y));this.pswp.applyBgOpacity(t),e.applyCurrentZoomPan()}}else{this._panOrMoveMainScroll("x")||(this._panOrMoveMainScroll("y"),e&&(roundPoint(e.pan),e.applyCurrentZoomPan()))}}end(){const{velocity:t}=this.gestures,{mainScroll:i,currSlide:s}=this.pswp;let e=0;if(this.pswp.animations.stopAll(),i.isShifted()){const s=(i.x-i.getCurrSlideX())/this.pswp.viewportSize.x;t.x<-.5&&s<0||t.x<.1&&s<-.5?(e=1,t.x=Math.min(t.x,0)):(t.x>.5&&s>0||t.x>-.1&&s>.5)&&(e=-1,t.x=Math.max(t.x,0)),i.moveIndexBy(e,!0,t.x)}s&&s.currZoomLevel>s.zoomLevels.max||this.gestures.isMultitouch?this.gestures.zoomLevels.correctZoomPan(!0):(this._finishPanGestureForAxis("x"),this._finishPanGestureForAxis("y"))}_finishPanGestureForAxis(t){const{velocity:i}=this.gestures,{currSlide:s}=this.pswp;if(!s)return;const{pan:e,bounds:r}=s,n=e[t],o=this.pswp.bgOpacity<1&&"y"===t,a=n+project(i[t],.995);if(o){const t=this._getVerticalDragRatio(n),i=this._getVerticalDragRatio(a);if(t<0&&i<-.4||t>0&&i>.4)return void this.pswp.close()}const p=r.correctPan(t,a);if(n===p)return;const c=p===a?1:.82,h=this.pswp.bgOpacity,l=p-n;this.pswp.animations.startSpring({name:"panGesture"+t,isPan:!0,start:n,end:p,velocity:i[t],dampingRatio:c,onUpdate:i=>{if(o&&this.pswp.bgOpacity<1){const t=1-(p-i)/l;this.pswp.applyBgOpacity(clamp(h+(1-h)*t,0,1))}e[t]=Math.floor(i),s.applyCurrentZoomPan()}})}_panOrMoveMainScroll(t){const{p1:i,dragAxis:s,prevP1:e,isMultitouch:r}=this.gestures,{currSlide:n,mainScroll:o}=this.pswp,a=i[t]-e[t],p=o.x+a;if(!a||!n)return!1;if("x"===t&&!n.isPannable()&&!r)return o.moveTo(p,!0),!0;const{bounds:c}=n,h=n.pan[t]+a;if(this.pswp.options.allowPanToNext&&"x"===s&&"x"===t&&!r){const i=o.getCurrSlideX(),s=o.x-i,e=a>0,r=!e;if(h>c.min[t]&&e){if(c.min[t]<=this.startPan[t])return o.moveTo(p,!0),!0;this._setPanWithFriction(t,h)}else if(h<c.max[t]&&r){if(this.startPan[t]<=c.max[t])return o.moveTo(p,!0),!0;this._setPanWithFriction(t,h)}else if(0!==s){if(s>0)return o.moveTo(Math.max(p,i),!0),!0;if(s<0)return o.moveTo(Math.min(p,i),!0),!0}else this._setPanWithFriction(t,h)}else"y"===t&&(o.isShifted()||c.min.y===c.max.y)||this._setPanWithFriction(t,h);return!1}_getVerticalDragRatio(t){return(t-(this.pswp.currSlide?.bounds.center.y??0))/(this.pswp.viewportSize.y/3)}_setPanWithFriction(t,i,s){const{currSlide:e}=this.pswp;if(!e)return;const{pan:r,bounds:n}=e;if(n.correctPan(t,i)!==i||s){const e=Math.round(i-r[t]);r[t]+=e*(s||.35)}else r[t]=i}}export default DragHandler;