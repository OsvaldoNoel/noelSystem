QUnit.module("data"),QUnit.test("jQuery.data() camelCased names",(function(a){var t=["datum","ropeAdope","ОлегMichał","already-Big","number-2","unidash-"],e=["dat-data","hangy-dasher-","-dashy-hanger"];a.expect(16);var n,c=document.createElement("div");expectNoWarning(a,"No existing data object",(function(){t.concat(e).forEach((function(a){jQuery.data(c,a)})),a.equal(jQuery.hasData(c),!1,"data probes did not fill a data object")})),expectNoWarning(a,"Data set/get without warning via API",(function(){t.concat(e).forEach((function(t,e){jQuery.data(c,t,e),a.equal(jQuery.data(c,t),e,t+"="+e)}))})),n=jQuery.data(c),expectWarning(a,"Dashed name conflicts",e.length,(function(){e.forEach((function(t,e){n[t]=e,a.equal(jQuery.data(c,t),n[t],t+" respects data object")}))}))})),QUnit.test("jQuery.data() camelCased names (mass setter)",(function(a){var t=["datum","ropeAdope","ОлегMichał","already-Big","number-2","unidash-"],e=["dat-data","hangy-dasher-","-dashy-hanger"];a.expect(11);var n=document.createElement("div");expectNoWarning(a,"Data set as an object and get without warning via API",(function(){var e={};t.forEach((function(a,t){e[a]=t})),jQuery.data(n,e),t.forEach((function(t,e){a.equal(jQuery.data(n,t),e,t+"="+e)}))})),expectWarning(a,"Data set as an object and get without warning via API",(function(){var t={};e.forEach((function(a,e){t[a]=e})),jQuery.data(n,t),e.forEach((function(t,e){a.equal(jQuery.data(n,t),e,t+"="+e)}))}))}));