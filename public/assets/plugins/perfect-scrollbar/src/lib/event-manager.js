class EventElement{constructor(e){this.element=e,this.handlers={}}bind(e,n){void 0===this.handlers[e]&&(this.handlers[e]=[]),this.handlers[e].push(n),this.element.addEventListener(e,n,!1)}unbind(e,n){this.handlers[e]=this.handlers[e].filter((t=>!(!n||t===n)||(this.element.removeEventListener(e,t,!1),!1)))}unbindAll(){for(const e in this.handlers)this.unbind(e)}get isEmpty(){return Object.keys(this.handlers).every((e=>0===this.handlers[e].length))}}export default class EventManager{constructor(){this.eventElements=[]}eventElement(e){let n=this.eventElements.filter((n=>n.element===e))[0];return n||(n=new EventElement(e),this.eventElements.push(n)),n}bind(e,n,t){this.eventElement(e).bind(n,t)}unbind(e,n,t){const s=this.eventElement(e);s.unbind(n,t),s.isEmpty&&this.eventElements.splice(this.eventElements.indexOf(s),1)}unbindAll(){this.eventElements.forEach((e=>e.unbindAll())),this.eventElements=[]}once(e,n,t){const s=this.eventElement(e),i=e=>{s.unbind(n,i),t(e)};s.bind(n,i)}}