$.fn.spectrum.inputTypeColorSupport=function(){return!1},module("Initialization"),test("jQuery Plugin Can Be Created",(function(){var e=$("<input id='spec' />").spectrum();ok("spec"===e.attr("id"),"Element returned from plugin"),e.spectrum("set","red"),equal(e.spectrum("get").toName(),"red","Basic color setting"),equal(e.spectrum("option","showInput"),!1,"Undefined option is false."),e.spectrum({showInput:!0}),equal(e.spectrum("option","showInput"),!0,"Double initialized spectrum is destroyed before recreating."),e.spectrum("destroy"),equal(e.spectrum("container"),e,"After destroying spectrum, string function returns input.")})),test("Polyfill",(function(){var e=$("#type-color-on-page");ok(e.spectrum("get").toHex,"The input[type=color] has been initialized on load"),e.spectrum("destroy")})),test("Per-element Options Are Read From Data Attributes",(function(){var e=$("<input id='spec' data-show-alpha='true' />").spectrum();equal(e.spectrum("option","showAlpha"),!0,"Took showAlpha value from data attribute"),e.spectrum("destroy");var t=$("<input id='spec' data-show-alpha='false' />").spectrum({showAlpha:!0});equal(t.spectrum("option","showAlpha"),!0,"Took showAlpha value from options arg"),t.spectrum("destroy");var s=$("<input id='spec' />").spectrum({showAlpha:!0});equal(s.spectrum("option","showAlpha"),!0,"Kept showAlpha without data attribute"),s.spectrum("destroy")})),test("Events Fire",(function(){expect(4);var e=0,t=$("<input id='spec' />").spectrum();t.on("beforeShow.spectrum",(function(t){if(0===e)return ok(!0,"Cancel beforeShow"),e++,!1;equal(e,1,"Allow beforeShow"),e++})),t.on("show.spectrum",(function(t){equal(e,2,"Show"),e++})),t.on("hide.spectrum",(function(t){equal(e,3,"Hide"),e++})),t.on("move.spectrum",(function(e){ok(!1,"Change should not fire from `move` call")})),t.on("change",(function(e,t){ok(!1,"Change should not fire from `set` call")})),t.spectrum("show"),t.spectrum("show"),t.spectrum("hide"),t.spectrum("set","red"),t.spectrum("destroy")})),test("Events Fire (text input change)",(function(){expect(3);var e=0,t=$("<input id='spec' />").spectrum({showInput:!0});t.on("move.spectrum",(function(t,s){equal(e,0,"Move fires when input changes"),e++})),t.on("change.spectrum",(function(t,s){equal(e,2,"Change should not fire when input changes, only when chosen"),e++})),t.spectrum("container").find(".sp-input").val("blue").trigger("change"),e++,t.spectrum("container").find(".sp-choose").click(),t.spectrum("destroy"),equal(e,3,"All events fired")})),test("Escape hides the colorpicker",(function(){expect(1);var e=$("<input id='spec' />").spectrum();e.on("hide.spectrum",(function(e){ok(!0,"Hide event should fire")}));var t=jQuery.Event("keydown");t.keyCode=27,$(document).trigger(t),e.spectrum("show"),$(document).trigger(t),e.spectrum("destroy")})),test("Dragging",(function(){var e=$("<input id='spec' />").spectrum(),t=e.spectrum("container").find(".sp-hue");ok(t.length,"There is a hue slider"),t.trigger("mousedown"),ok($("body").hasClass("sp-dragging"),"The body has dragging class"),t.trigger("mouseup"),ok(!$("body").hasClass("sp-dragging"),"The body does not have a dragging class"),e.spectrum("destroy")})),module("Defaults"),test("Default Color Is Set By Input Value",(function(){var e=$("<input id='spec' value='red' />").spectrum();equal(e.spectrum("get").toName(),"red","Basic color setting");var t=$("<input id='spec' value='not a color' />").spectrum();equal(t.spectrum("get").toHex(),"000000","Defaults to black with an invalid color");var s=$("<input id='spec' />").spectrum();equal(s.spectrum("get"),null,"Defaults to null with no value set"),e.spectrum("destroy"),t.spectrum("destroy"),s.spectrum("destroy")})),module("Palettes"),test("Palette Events Fire In Correct Order ",(function(){expect(4);var e=$("<input id='spec' value='red' />").spectrum({showPalette:!0,palette:[["red","green","blue"]],move:function(){}}),t=0;e.on("move.spectrum",(function(e){equal(t,0,"move fires before change"),t++})),e.on("change.spectrum",(function(e){equal(t,1,"change fires after move"),t++})),e.spectrum("container").find(".sp-thumb-el:last-child").click(),equal(t,1,"Change event hasn't fired after palette click"),e.spectrum("container").find(".sp-choose").click(),equal(t,2,"Change event has fired after choose button click"),e.spectrum("destroy")})),test("Palette click events work",(function(){expect(7);var e=0,t=["blue","green","red"],s=0,r=$("<input id='spec' value='orange' />").spectrum({showPalette:!0,preferredFormat:"name",palette:[["red","green","blue"]],show:function(e){equal(e.toName(),"orange","correct shown color")},move:function(s){equal(s.toName(),t[e],"Move # "+e+" is correct"),e++},change:function(e){equal(s,0,"Only one change happens"),equal(e.toName(),"red"),s++}}).spectrum("show");r.spectrum("container").find(".sp-thumb-el:nth-child(3)").click(),r.spectrum("container").find(".sp-thumb-el:nth-child(2) .sp-thumb-inner").click(),r.spectrum("container").find(".sp-thumb-el:nth-child(1) .sp-thumb-inner").click(),r.spectrum("container").find(".sp-choose").click(),equal(r.val(),"red","Element's value is set"),r.spectrum("destroy")})),test("Palette doesn't changes don't stick if cancelled",(function(){expect(4);var e=0,t=["blue","green","red","orange"],s=$("<input id='spec' value='orange' />").spectrum({showPalette:!0,preferredFormat:"name",palette:[["red","green","blue"]],move:function(s){equal(s.toName(),t[e],"Move # "+e+" is correct"),e++},change:function(e){ok(!1,"No change fires")}}).spectrum("show");s.spectrum("container").find(".sp-thumb-el:nth-child(3)").click(),s.spectrum("container").find(".sp-thumb-el:nth-child(2)").click(),s.spectrum("container").find(".sp-thumb-el:nth-child(1)").click(),s.spectrum("container").find(".sp-cancel").click(),equal(s.val(),"orange","Element's value is the same"),s.spectrum("destroy")})),test("hideAfterPaletteSelect: Palette stays open after color select when false",(function(){var e=$("<input id='spec' value='orange' />").spectrum({showPalette:!0,hideAfterPaletteSelect:!1,palette:[["red","green","blue"]]});e.spectrum("show"),e.spectrum("container").find(".sp-thumb-el:nth-child(1)").click(),ok(!e.spectrum("container").hasClass("sp-hidden"),"palette is still visible after color selection"),e.spectrum("destroy")})),test("hideAfterPaletteSelect: Palette closes after color select when true",(function(){expect(2);var e=$("<input id='spec' value='orange' />").spectrum({showPalette:!0,hideAfterPaletteSelect:!0,change:function(e){equal(e.toName(),"red","change fires")},palette:[["red","green","blue"]]});e.spectrum("show"),e.spectrum("container").find(".sp-thumb-el:nth-child(1)").click(),ok(e.spectrum("container").hasClass("sp-hidden"),"palette is still hidden after color selection"),e.spectrum("destroy")})),test("Local Storage Is Limited ",(function(){var e=$("<input id='spec' value='red' />").spectrum({localStorageKey:"spectrum.tests",palette:[["#ff0","#0ff"]],maxSelectionSize:3});e.spectrum("set","#f00"),e.spectrum("set","#e00"),e.spectrum("set","#d00"),e.spectrum("set","#c00"),e.spectrum("set","#b00"),e.spectrum("set","#a00"),equal(localStorage["spectrum.tests"],"rgb(204, 0, 0);rgb(187, 0, 0);rgb(170, 0, 0)","Local storage array has been limited"),e.spectrum("set","#ff0"),e.spectrum("set","#0ff"),equal(localStorage["spectrum.tests"],"rgb(204, 0, 0);rgb(187, 0, 0);rgb(170, 0, 0)","Local storage array did not get changed by selecting palette items"),e.spectrum("destroy")})),module("Options"),test("allowEmpty",(function(){var e=$("<input value='red' />").spectrum({allowEmpty:!0});e.spectrum("set",null),ok(!e.spectrum("get"),"input[type] color does not allow null values"),e.spectrum("destroy"),(e=$("<input value='red' />").spectrum({allowEmpty:!1})).spectrum("set",null),ok(e.spectrum("get"),"input[type] color does not allow null values"),e.spectrum("destroy")})),test("clickoutFiresChange",(function(){var e=$("<input value='red' />").spectrum({clickoutFiresChange:!1});e.spectrum("show"),equal(e.spectrum("get").toName(),"red","Color is initialized"),e.spectrum("set","orange"),equal(e.spectrum("get").toName(),"orange","Color is set"),$(document).click(),equal(e.spectrum("get").toName(),"red","Color is reverted after clicking 'cancel'"),e.spectrum("destroy"),(e=$("<input value='red' />").spectrum()).spectrum("show"),equal(e.spectrum("get").toName(),"red","Color is initialized"),e.spectrum("set","orange"),equal(e.spectrum("get").toName(),"orange","Color is set"),$(document).click(),equal(e.spectrum("get").toName(),"orange","Color is changed after clicking out"),e.spectrum("destroy")})),test("replacerClassName",(function(){var e=$("<input />").appendTo("body").spectrum({type:"color",replacerClassName:"test"});ok(e.next(".sp-replacer").hasClass("test"),"Replacer class has been applied"),e.spectrum("destroy").remove()})),test("containerClassName",(function(){var e=$("<input />").appendTo("body").spectrum({containerClassName:"test"});ok(e.spectrum("container").hasClass("test"),"Container class has been applied"),e.spectrum("destroy").remove()})),test("Options Can Be Set and Gotten Programmatically",(function(){var e=$("<input id='spec' />").spectrum({color:"#ECC",flat:!0,showInput:!0,className:"full-spectrum",showInitial:!0,showPalette:!0,showSelectionPalette:!0,maxPaletteSize:10,preferredFormat:"hex",localStorageKey:"spectrum.example",palette:[["red"],["green"]]}),t=e.spectrum("option");equal(t.flat,!0,"Fetching all options provides accurate value");var s=e.spectrum("option","className");equal(s,"full-spectrum","Fetching a single option returns that value"),e.spectrum("option","className","changed"),s=e.spectrum("option","className"),equal(s,"changed","Changing an option then fetching it is updated");var r=e.spectrum("container").find(".sp-palette-row:not(.sp-palette-row-selection) .sp-thumb-el").length;equal(r,2,"Two palette elements to start"),e.spectrum("option","palette",[["red"],["green"],["blue"]]);var o=e.spectrum("option","palette");deepEqual(o,[["red"],["green"],["blue"]],"Changing an option then fetching it is updated"),r=e.spectrum("container").find(".sp-palette-row:not(.sp-palette-row-selection) .sp-thumb-el").length,equal(r,3,"Three palette elements after updating");var a=$("<input />").spectrum({}),n=$("<div id='c' />").appendTo("body"),c=$("<input  type='color'/>").spectrum({appendTo:n}),u=$("<input type='color'/>").appendTo("#c").spectrum({appendTo:"parent"}),l=$("<input  type='color'/>").spectrum({appendTo:n,flat:!0});equal(a.spectrum("container").parent()[0],document.body,"Appended to body by default"),equal(c.spectrum("container").parent()[0],n[0],"Can be appended to another element"),equal(l.spectrum("container").parent()[0],$(l).parent()[0],"Flat CANNOT be appended to another element, will be same as input"),equal(u.spectrum("container").parent()[0],n[0],"Passing 'parent' to appendTo works as expected"),equal(e.spectrum("option","showPalette"),!0,"showPalette is true by default"),e.spectrum("option","showPalette",!1),equal(e.spectrum("option","showPalette"),!1,"showPalette is false after setting showPalette"),e.spectrum("option","showPaletteOnly",!0),equal(e.spectrum("option","showPaletteOnly"),!0,"showPaletteOnly is true after setting showPaletteOnly"),equal(e.spectrum("option","showPalette"),!0,"showPalette is true after setting showPaletteOnly"),e.spectrum("destroy"),a.spectrum("destroy"),c.spectrum("destroy"),l.spectrum("destroy"),u.spectrum("destroy").remove(),delete window.localStorage["spectrum.example"],n.remove()})),test("Show Input works as expected",(function(){var e=$("<input />").spectrum({showInput:!0,allowEmpty:!1,color:"red"}),t=e.spectrum("container").find(".sp-input");equal(t.val(),"red","Input is set to color by default"),t.val("").trigger("change"),ok(t.hasClass("sp-validation-error"),"Input has validation error class after being emptied."),t.val("red").trigger("change"),ok(!t.hasClass("sp-validation-error"),"Input does not have validation error class after being reset to original color."),equal(e.spectrum("get").toHexString(),"#ff0000","Color is still red"),e.spectrum("destroy")})),test("Toggle Picker Area button works as expected",(function(){var e=$("<div style='position:absolute; right:0; height:20px; width:150px'>").appendTo("body").show(),t=$("<input />").appendTo(e);t.spectrum({showInput:!0,showPaletteOnly:!0,togglePaletteOnly:!0,color:"red"});var s=t.spectrum("container"),r=s.find(".sp-palette-toggle"),o=s.find(".sp-picker-container"),a=s.find(".sp-palette-container");t.spectrum("show"),equal(o.is(":hidden"),!0,"The picker area is hidden by default."),ok(s.hasClass("sp-palette-only"),"The 'palette-only' class is enabled."),r.click(),equal(o.is(":hidden"),!1,"After toggling, the picker area is visible."),ok(!s.hasClass("sp-palette-only"),"The 'palette-only' class is disabled."),equal(Math.round(o.offset().top),Math.round(a.offset().top),"The picker area is next to the palette."),r.trigger("click"),equal(o.is(":hidden"),!0,"After toggling again, the picker area is hidden."),ok(s.hasClass("sp-palette-only"),"And the 'palette-only' class is enabled."),t.spectrum("hide"),t.spectrum("destroy"),t.remove(),e.remove()})),test("Tooltip is formatted based on preferred format",(function(){var e=$("<input />").spectrum({showInput:!0,color:"red",showPalette:!0,palette:[["red","rgba(255, 255, 255, .5)","rgb(0, 0, 255)"]]});function t(){return e.spectrum("container").find(".sp-thumb-el").map((function(){return this.getAttribute("title")})).toArray().join(" ")}e.spectrum("show"),e.spectrum("option","preferredFormat","rgb"),equal(t(),"rgb(255, 0, 0) rgba(255, 255, 255, 0.5) rgb(0, 0, 255)","Titles are updated to rgb"),equal(e.spectrum("get").toString(),"rgb(255, 0, 0)","Value's format is updated"),e.spectrum("option","preferredFormat","hex6"),equal(t(),"#ff0000 #ffffff #0000ff","Titles are updated to hex6"),equal(e.spectrum("get").toString(),"#ff0000","Value's format is updated"),e.spectrum("option","preferredFormat","hex3"),equal(t(),"#f00 #fff #00f","Titles are updated to hex3"),equal(e.spectrum("get").toString(),"#f00","Value's format is updated"),e.spectrum("option","preferredFormat","name"),equal(t(),"red #ffffff blue","Titles are updated to name"),equal(e.spectrum("get").toString(),"red","Value's format is updated"),e.spectrum("option","preferredFormat","hsv"),equal(t(),"hsv(0, 100%, 100%) hsva(0, 0%, 100%, 0.5) hsv(240, 100%, 100%)","Titles are updated to hsv"),equal(e.spectrum("get").toString(),"hsv(0, 100%, 100%)","Value's format is updated"),e.spectrum("option","preferredFormat","hsl"),equal(t(),"hsl(0, 100%, 50%) hsla(0, 0%, 100%, 0.5) hsl(240, 100%, 50%)","Titles are updated to hsl"),equal(e.spectrum("get").toString(),"hsl(0, 100%, 50%)","Value's format is updated"),e.spectrum("option","preferredFormat","rgb"),equal(t(),"rgb(255, 0, 0) rgba(255, 255, 255, 0.5) rgb(0, 0, 255)","Titles are updated to rgb"),equal(e.spectrum("get").toString(),"rgb(255, 0, 0)","Value's format is updated"),e.spectrum("destroy")})),module("Methods"),test("Methods work as described",(function(){var e=$("<input id='spec' />").spectrum();e.spectrum("show"),ok(e.spectrum("container").is(":visible"),"Spectrum is visible"),e.spectrum("hide"),ok(e.spectrum("container").not(":visible"),"Spectrum is no longer visible"),e.spectrum("toggle"),ok(e.spectrum("container").is(":visible"),"Spectrum is visible after toggle"),e.spectrum("toggle"),ok(e.spectrum("container").not(":visible"),"Spectrum is no longer visible after toggle"),e.spectrum("set","orange");var t=e.spectrum("get","color");ok("#ffa500"==t.toHexString(),"Color has been set and gotten as hex"),ok("orange"==t.toName(),"Color has been set and gotten as name"),ok("hsv(39, 100%, 100%)"==t.toHsvString(),"Color has been set and gotten as hsv"),ok("rgb(255, 165, 0)"==t.toRgbString(),"Color has been set and gotten as rgb"),ok("hsl(39, 100%, 50%)"==t.toHslString(),"Color has been set and gotten as hsl"),ok(function(){var t,s;for(t=0;t<16;t++)if(s="0"+t.toString(16)+"000000",Math.round(255*e.spectrum("set",s).spectrum("get").getAlpha())!=t)return!1;return!0}(),"Set and get has preserved alpha resolution"),ok(e.spectrum("container").hasClass("sp-container"),"Container can be retrieved"),e.spectrum("disable"),ok(e.is(":disabled"),"Can be disabled"),e.spectrum("show"),ok(e.not(":visible"),"Cannot show when disabled"),e.spectrum("enable"),ok(!e.is(":disabled"),"Can be enabled"),e.spectrum("reflow"),raises((function(){e.spectrum("no method")}),"Expecting exception to be thrown when calling with no method"),e.spectrum("destroy"),equal(e.spectrum("container"),e,"No usage after being destroyed"),equal(e.spectrum("get"),e,"No usage after being destroyed"),e.spectrum("destroy")})),test("Change events fire as described",(function(){expect(0);var e=$("<input />");e.on("change",(function(){ok(!1,"Change should not be fired inside of input change")})),e.spectrum({color:"red",change:function(){ok(!1,"Change should not be fired inside of spectrum callback")}}),e.spectrum("set","orange")})),test("The selectedPalette should be updated in each spectrum instance, when storageKeys are identical.",(function(){delete window.localStorage["spectrum.tests"];var e="rgb(0, 244, 0)",t=$("<input id='firstEl' value='red' />").spectrum({showPalette:!0,localStorageKey:"spectrum.tests"}),s=$("<input id='secondEl' value='blue' />").spectrum({showPalette:!0,localStorageKey:"spectrum.tests"});t.spectrum("set",e),s.spectrum("toggle");var r=s.spectrum("container").find('span[data-color="'+e+'"]');ok(r.length>0,"Selected color is also shown in the others instance's palette."),delete window.localStorage["spectrum.tests"],t.spectrum("destroy"),s.spectrum("destroy")})),test("The selectedPalette should not be updated in spectrum instances that have different storageKeys.",(function(){delete window.localStorage["spectrum.test_1"],delete window.localStorage["spectrum.test_2"];var e="rgb(0, 244, 0)",t=$("<input id='firstEl' value='red' />").spectrum({showPalette:!0,localStorageKey:"spectrum.test_1"}),s=$("<input id='secondEl' value='blue' />").spectrum({showPalette:!0,localStorageKey:"spectrum.test_2"});t.spectrum("set",e),s.spectrum("toggle");var r=s.spectrum("container").find('span[data-color="'+e+'"]');ok(0===r.length,"Selected color should not be available in instances with other storageKey."),t.spectrum("destroy"),s.spectrum("destroy"),delete window.localStorage["spectrum.test_1"],delete window.localStorage["spectrum.test_2"]})),test("Cancelling reverts color",(function(){var e=$("<input value='red' />").spectrum();e.spectrum("show"),equal(e.spectrum("get").toName(),"red","Color is initialized"),e.spectrum("set","orange"),equal(e.spectrum("get").toName(),"orange","Color is set"),e.spectrum("container").find(".sp-cancel").click(),equal(e.spectrum("get").toName(),"red","Color is reverted after clicking 'cancel'"),e.spectrum("destroy")})),test("Choosing updates the color",(function(){var e=$("<input value='red' />").spectrum();e.spectrum("show"),equal(e.spectrum("get").toName(),"red","Color is initialized"),e.spectrum("set","orange"),equal(e.spectrum("get").toName(),"orange","Color is set"),e.spectrum("container").find(".sp-choose").click(),equal(e.spectrum("get").toName(),"orange","Color is kept after clicking 'choose'"),e.spectrum("destroy")})),test("Custom offset",(function(){var e=$("<input value='red' />").spectrum();e.spectrum("show"),deepEqual(e.spectrum("container").offset(),{top:0,left:0}),e.spectrum("hide"),e.spectrum("offset",{top:10,left:10}),e.spectrum("show"),deepEqual(e.spectrum("container").offset(),{top:10,left:10}),e.spectrum("hide"),e.spectrum("offset",null),e.spectrum("show"),deepEqual(e.spectrum("container").offset(),{top:0,left:0}),e.spectrum("hide"),e.spectrum("destroy");var t=$("<input value='red' />").spectrum({offset:{top:100,left:100}});t.spectrum("show"),deepEqual(t.spectrum("container").offset(),{top:100,left:100}),t.spectrum("hide")}));