const Utils=$.fn.bootstrapTable.utils,TYPE_NAME={json:"JSON",xml:"XML",png:"PNG",csv:"CSV",txt:"TXT",sql:"SQL",doc:"MS-Word",excel:"MS-Excel",xlsx:"MS-Excel (OpenXML)",powerpoint:"MS-Powerpoint",pdf:"PDF"};Object.assign($.fn.bootstrapTable.defaults,{showExport:!1,exportDataType:"basic",exportTypes:["json","xml","csv","txt","sql","excel"],exportOptions:{},exportFooter:!1}),Object.assign($.fn.bootstrapTable.columnDefaults,{forceExport:!1,forceHide:!1}),Object.assign($.fn.bootstrapTable.defaults.icons,{export:{bootstrap3:"glyphicon-export icon-share",bootstrap5:"bi-download",materialize:"file_download","bootstrap-table":"icon-download"}[$.fn.bootstrapTable.theme]||"fa-download"}),Object.assign($.fn.bootstrapTable.locales,{formatExport:()=>"Export data"}),Object.assign($.fn.bootstrapTable.defaults,$.fn.bootstrapTable.locales),$.fn.bootstrapTable.methods.push("exportTable"),Object.assign($.fn.bootstrapTable.defaults,{onExportSaved:t=>!1,onExportStarted:()=>!1}),Object.assign($.fn.bootstrapTable.events,{"export-saved.bs.table":"onExportSaved","export-started.bs.table":"onExportStarted"}),$.BootstrapTable=class extends $.BootstrapTable{initToolbar(...t){const o=this.options;let e=o.exportTypes;if(this.showToolbar=this.showToolbar||o.showExport,this.options.showExport){if("string"==typeof e){const t=e.slice(1,-1).replace(/ /g,"").split(",");e=t.map((t=>t.slice(1,-1)))}if("string"==typeof o.exportOptions&&(o.exportOptions=Utils.calculateObjectValue(null,o.exportOptions)),this.$export=this.$toolbar.find(">.columns div.export"),this.$export.length)return void this.updateExportButton();this.buttons=Object.assign(this.buttons,{export:{html:()=>{if(1===e.length)return`\n                  <div class="export ${this.constants.classes.buttonsDropdown}"\n                  data-type="${e[0]}">\n                  <button class="${this.constants.buttonsClass}"\n                  aria-label="${o.formatExport()}"\n                  type="button"\n                  title="${o.formatExport()}">\n                  ${o.showButtonIcons?Utils.sprintf(this.constants.html.icon,o.iconsPrefix,o.icons.export):""}\n                  ${o.showButtonText?o.formatExport():""}\n                  </button>\n                  </div>\n                `;const t=[];t.push(`\n                <div class="export ${this.constants.classes.buttonsDropdown}">\n                <button class="${this.constants.buttonsClass} dropdown-toggle"\n                aria-label="${o.formatExport()}"\n                ${this.constants.dataToggle}="dropdown"\n                type="button"\n                title="${o.formatExport()}">\n                ${o.showButtonIcons?Utils.sprintf(this.constants.html.icon,o.iconsPrefix,o.icons.export):""}\n                ${o.showButtonText?o.formatExport():""}\n                ${this.constants.html.dropdownCaret}\n                </button>\n                ${this.constants.html.toolbarDropdown[0]}\n              `);for(const o of e)if(TYPE_NAME.hasOwnProperty(o)){const e=$(Utils.sprintf(this.constants.html.pageDropdownItem,"",TYPE_NAME[o]));e.attr("data-type",o),t.push(e.prop("outerHTML"))}return t.push(this.constants.html.toolbarDropdown[1],"</div>"),t.join("")}}})}if(super.initToolbar(...t),this.$export=this.$toolbar.find(">.columns div.export"),!this.options.showExport)return;this.updateExportButton();let s=this.$export.find("[data-type]");1===e.length&&(s=this.$export),s.click((t=>{t.preventDefault(),this.trigger("export-started"),this.exportTable({type:$(t.currentTarget).data("type")})})),this.handleToolbar()}handleToolbar(){this.$export&&super.handleToolbar&&super.handleToolbar()}exportTable(t){const o=this.options,e=this.header.stateField,s=o.cardView,i=i=>{e&&this.hideColumn(e),s&&this.toggleView(),this.columns.forEach((t=>{t.forceHide&&this.hideColumn(t.field)}));const n=this.getData();if(o.detailView&&o.detailViewIcon){const t="left"===o.detailViewAlign?0:this.getVisibleFields().length+Utils.getDetailViewIndexOffset(this.options);o.exportOptions.ignoreColumn=[t].concat(o.exportOptions.ignoreColumn||[])}if(o.exportFooter&&o.height){const t=this.$tableFooter.find("tr").first(),o={},e=[];$.each(t.children(),((t,s)=>{const i=$(s).children(".th-inner").first().html();o[this.columns[t].field]="&nbsp;"===i?null:i,e.push(i)})),this.$body.append(this.$body.children().last()[0].outerHTML);const s=this.$body.children().last();$.each(s.children(),((t,o)=>{$(o).html(e[t])}))}const a=this.getHiddenColumns();a.forEach((t=>{t.forceExport&&this.showColumn(t.field)})),"function"==typeof o.exportOptions.fileName&&(t.fileName=o.exportOptions.fileName()),this.$el.tableExport(Utils.extend({onAfterSaveToFile:()=>{o.exportFooter&&this.load(n),e&&this.showColumn(e),s&&this.toggleView(),a.forEach((t=>{t.forceExport&&this.hideColumn(t.field)})),this.columns.forEach((t=>{t.forceHide&&this.showColumn(t.field)})),i&&i()}},o.exportOptions,t))};if("all"===o.exportDataType&&o.pagination){const t="server"===o.sidePagination?"post-body.bs.table":"page-change.bs.table",e=this.options.virtualScroll;this.$el.one(t,(()=>{setTimeout((()=>{const t=this.getData();i((()=>{this.options.virtualScroll=e,this.togglePagination()})),this.trigger("export-saved",t)}),0)})),this.options.virtualScroll=!1,this.togglePagination()}else if("selected"===o.exportDataType){let t=this.getData(),e=this.getSelections();const s=o.pagination;if(!e.length)return;"server"===o.sidePagination&&(t={total:o.totalRows,[this.options.dataField]:t},e={total:e.length,[this.options.dataField]:e}),this.load(e),s&&this.togglePagination(),i((()=>{s&&this.togglePagination(),this.load(t)})),this.trigger("export-saved",e)}else i(),this.trigger("export-saved",this.getData(!0))}updateSelected(){super.updateSelected(),this.updateExportButton()}updateExportButton(){"selected"===this.options.exportDataType&&this.$export.find("> button").prop("disabled",!this.getSelections().length)}};