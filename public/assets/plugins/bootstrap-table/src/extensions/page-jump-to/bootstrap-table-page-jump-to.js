const Utils=$.fn.bootstrapTable.utils;Object.assign($.fn.bootstrapTable.defaults,{showJumpTo:!1,showJumpToByPages:0}),Object.assign($.fn.bootstrapTable.locales,{formatJumpTo:()=>"GO"}),Object.assign($.fn.bootstrapTable.defaults,$.fn.bootstrapTable.locales),$.BootstrapTable=class extends $.BootstrapTable{initPagination(...t){if(super.initPagination(...t),this.options.showJumpTo&&this.totalPages>=this.options.showJumpToByPages){const t=this.$pagination.find("> .pagination");let s=t.find(".page-jump-to");if(!s.length){s=$(Utils.sprintf(this.constants.html.inputGroup,`<input type="number"\n            class="${this.constants.classes.input}${Utils.sprintf(" %s%s",this.constants.classes.inputPrefix,this.options.iconSize)}"\n            value="${this.options.pageNumber}"\n            min="1"\n            max="${this.totalPages}">`,`<button class="${this.constants.buttonsClass}" type="button">\n          ${this.options.formatJumpTo()}\n          </button>`)).addClass("page-jump-to").appendTo(t);for(const t of s){const s=$(t).find("input");$(t).find("button").click((()=>{this.selectPage(+s.val())})),s.keyup((t=>{""!==s.val()&&(13!==t.keyCode?+s.val()<+s.attr("min")?s.val(s.attr("min")):+s.val()>+s.attr("max")&&s.val(s.attr("max")):this.selectPage(+s.val()))})),s.blur((()=>{""===s.val()&&s.val(this.options.pageNumber)}))}}}}};