const $=require("jquery"),Typeahead=require("../../src/jquery.typeahead");describe("Typeahead source option Tests",(()=>{"use strict";let a,e;beforeAll((()=>{document.body.innerHTML='<input class="js-typeahead">',a=$.typeahead({input:".js-typeahead",minLength:0,display:["display"],source:[]})})),describe("Typeahead.options.source - Test for an Array Strings",(()=>{beforeAll((()=>{a.options.source=["data1","data2"],a.unifySourceFormat(),a.node.trigger("generate")})),it("Should format the Typeahead source into a group.data that contains an Array of Objects",(()=>{expect(a.options.source).toEqual({group:{cache:!1,minLength:0,maxLength:1/0,dynamic:!1,data:["data1","data2"]}}),expect(a.source).toEqual({group:[{display:"data1",group:"group"},{display:"data2",group:"group"}]})}))})),describe("Typeahead.options.source - Test for a String (url)",(()=>{beforeAll((()=>{a.options.source="data.json",e=a.unifySourceFormat()})),it("Should format the Source option into an Array of Strings",(()=>{expect(e).toBeTruthy(),expect(a.options.source).toEqual({group:{cache:!1,minLength:0,maxLength:1/0,dynamic:!1,ajax:{url:"data.json"}}})}))})),describe("Typeahead.options.source - Test for data Array + url String",(()=>{beforeAll((()=>{a.options.source={data:["item1","item2"],url:"data.json",display:"display"},e=a.unifySourceFormat()})),it("Should format the Source option into a group with data and ajax keys",(()=>{expect(e).toBeTruthy(),expect(a.options.source).toEqual({group:{cache:!1,minLength:0,maxLength:1/0,dynamic:!1,data:["item1","item2"],ajax:{url:"data.json"},display:["display"]}})}))})),describe("Typeahead.options.source - Test for group with url String",(()=>{beforeAll((()=>{a.options.source={group:"data.json"},e=a.unifySourceFormat()})),it("Should format the Source option into a group with ajax key",(()=>{expect(e).toBeTruthy(),expect(a.options.source).toEqual({group:{cache:!1,minLength:0,maxLength:1/0,dynamic:!1,ajax:{url:"data.json"}}})}))})),describe("Typeahead.options.source - Test for group with ajax Object",(()=>{beforeAll((()=>{a.options.source={ajax:{url:"data.json",dataType:"jsonp"}},e=a.unifySourceFormat()})),it("Should format the Source option into a group with ajax key",(()=>{expect(e).toBeTruthy(),expect(a.options.source).toEqual({group:{cache:!1,minLength:0,maxLength:1/0,dynamic:!1,ajax:{url:"data.json",dataType:"jsonp"}}})}))})),describe("Typeahead.options.source - Test for group with Array, ajax as String",(()=>{beforeAll((()=>{a.options.source={group:{url:["data.json","path"],display:"display"}},e=a.unifySourceFormat()})),it("Should format the Source option into a group with ajax.url and ajax.path keys",(()=>{expect(e).toBeTruthy(),expect(a.options.source).toEqual({group:{cache:!1,minLength:0,maxLength:1/0,dynamic:!1,ajax:{url:"data.json",path:"path"},display:["display"]}})}))})),describe("Typeahead.options.source - Test for group with Array, ajax as Object",(()=>{beforeAll((()=>{a.options.source={group:{url:[{url:"data.json",dataType:"jsonp",path:"ajax.path"},"path"],display:"display"}},e=a.unifySourceFormat()})),it("Should format the Source option into a group with ajax.url and ajax.path keys",(()=>{expect(e).toBeTruthy(),expect(a.options.source).toEqual({group:{cache:!1,minLength:0,maxLength:1/0,dynamic:!1,ajax:{url:"data.json",path:"ajax.path",dataType:"jsonp"},display:["display"]}})}))})),describe("Typeahead.options.source - Test for group with legacy url key",(()=>{beforeAll((()=>{a.options.source={group:{url:{url:"data.json",method:"GET"},display:"display"}},e=a.unifySourceFormat()})),it("Should format the Source option replacing url key by ajax",(()=>{expect(e).toBeTruthy(),expect(a.options.source).toEqual({group:{cache:!1,minLength:0,maxLength:1/0,dynamic:!1,ajax:{url:"data.json",method:"GET"},display:["display"]}})}))})),describe("Typeahead.options.source - Test for group with legacy url key",(()=>{beforeAll((()=>{a.options.source={group:{test:"blabla"}},e=a.unifySourceFormat()})),it("Should format the Source option replacing url key by ajax",(()=>{expect(e).toBeFalsy()}))}))}));